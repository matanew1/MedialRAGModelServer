services:
  rag-medical-api:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./data:/app/data:ro
      - ./index:/app/index
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"

  # Optional: Add nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - rag-medical-api
    restart: unless-stopped
    profiles:
      - production

  # Test runner service (ephemeral) - builds same image and executes pytest
  tests:
    build: .
    # Install additional test-only deps then run pytest
    command: >-
      sh -c 'set -e;
      pip install -q -r requirements-test.txt;
      echo "Waiting for rag-medical-api health...";
      for i in $(seq 1 30); do
        if curl -sf http://rag-medical-api:8000/health > /dev/null; then
          echo "API healthy"; break; fi; sleep 2;
      done;
      pytest -q --maxfail=1'
    environment:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    volumes:
      - .:/app:ro
      - pytest_cache:/app/.pytest_cache
    depends_on:
      rag-medical-api:
        condition: service_healthy
    profiles:
      - test
    # Prevent hanging containers once tests finish
    restart: "no"

volumes:
  pytest_cache: {}
